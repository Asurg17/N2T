// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    //If address[14] is 1 it means that adress is not in RAM16K
    //If adress[14] is 1 -> Since 24576 the KBD adress is 110000000000000 
    //if address[13] is 1 it means that adress is in KBD if not is in SCREEN
    //So -- 00 and 01 -> RAM, 10 -> SCREEN, 11 -> KDB
    DMux4Way(in=load, sel=address[13..14], a=inRam1, b=inRam2, c=inScreen, d=inKbd);
    Xor(a=inRam1, b=inRam2, out=inRam); 

    Keyboard(out=KBD-out); //KBD
    Screen(in=in, load=inScreen, address=address[0..12], out=SCREEN-out); //SCREEN
    RAM16K(in=in, load=inRam, address=address[0..13], out=RAM-out); //RAM
    
    Mux4Way16(a=RAM-out, b=RAM-out, c=SCREEN-out, d=KBD-out, sel=address[13..14], out=out);
}