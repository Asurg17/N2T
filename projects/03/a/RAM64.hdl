// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux8Way(in=load, sel=address[3..5], a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8);

    RAM8(in=in, load=load1, address=address[0..2], out=RAM8-1);
    RAM8(in=in, load=load2, address=address[0..2], out=RAM8-2);
    RAM8(in=in, load=load3, address=address[0..2], out=RAM8-3);
    RAM8(in=in, load=load4, address=address[0..2], out=RAM8-4);
    RAM8(in=in, load=load5, address=address[0..2], out=RAM8-5);
    RAM8(in=in, load=load6, address=address[0..2], out=RAM8-6);
    RAM8(in=in, load=load7, address=address[0..2], out=RAM8-7);
    RAM8(in=in, load=load8, address=address[0..2], out=RAM8-8);

    Mux8Way16(a=RAM8-1, b=RAM8-2, c=RAM8-3, d=RAM8-4, e=RAM8-5, f=RAM8-6, g=RAM8-7, h=RAM8-8, sel=address[3..5], out=out);

}